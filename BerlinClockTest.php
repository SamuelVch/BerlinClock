<?php

use \PHPUnit\Framework\TestCase;
require "BerlinClock.php";

class BerlinClockTest extends TestCase
{
    private $berlinClock;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->berlinClock = new BerlinClock();
    }

    public function testSample() {
        //Arrange

        //Act

        //Assert
        $this->assertTrue(true);
    }

    public function test_translate_given1_shouldReturn1Yellow() {
        $actual = $this->actTranslate(1);

        $this->assertEquals(["yellow", "black", "black", "black"], $actual);
    }

    public function test_translate_given2_shouldReturn2Yellow() {
        $actual = $this->actTranslate(2);

        $this->assertEquals(["yellow", "yellow","black", "black"], $actual);
    }

    public function test_translate_given3_shouldReturn3Yellow() {
        $actual = $this->actTranslate(3);

        $this->assertEquals(["yellow", "yellow", "yellow", "black"], $actual);
    }

    public function test_translate5Minutes_given5_shouldReturn1Yellow() {
        $actual = $this->actTranslate5Minutes(5);

        $this->assertEquals(["yellow", "black", "black", "black", "black", "black", "black", "black", "black", "black", "black"], $actual);
    }

    public function test_translate5Minutes_given10_shouldReturn2Yellow()
    {
        $actual = $this->actTranslate5Minutes(10);

        $this->assertEquals(["yellow", "yellow", "black", "black", "black", "black", "black", "black", "black", "black", "black"], $actual);
    }

    public function test_translate5Minutes_given11_shouldReturn2Yellow() {
        $actual = $this->actTranslate5Minutes(11);

        $this->assertEquals(["yellow", "yellow", "black", "black", "black", "black", "black", "black", "black", "black", "black"], $actual);
    }

    public function test_translate5Minutes_given15_shouldReturn2Yellow1Red() {
        $actual = $this->actTranslate5Minutes(15);

        $this->assertEquals(["yellow", "yellow" ,"red", "black", "black", "black", "black", "black", "black", "black", "black"], $actual);
    }

    public function test_translateHour_given1_shouldReturn1Red() {
        $actual = $this->actTranslateHour(1);
        
        $this->assertEquals(["red", "black", "black", "black"], $actual);

    }

    public function test_translateHour_given2_shouldReturn2Red() {
        $actual = $this->actTranslateHour(2);

        $this->assertEquals(["red", "red", "black", "black"], $actual);
    }

    public function test_translateHour_given3_shouldReturn3Red() {
        $actual = $this->actTranslateHour(3);

        $this->assertEquals(["red", "red", "red", "black"], $actual);
    }

    public function test_translate5Hours_given5_shouldReturn1Red() {
        $actual = $this->actTranslate5Hours(5);

        $this->assertEquals(["red", "black", "black", "black"], $actual);
    }

    public function test_translate5Hours_given11_shouldReturn2Red() {
        $actual = $this->actTranslate5Hours(11);

        $this->assertEquals(["red", "red", "black", "black"], $actual);
    }

    public function test_translate5Hours_given19_shouldReturn3Red() {
        $actual = $this->actTranslate5Hours(19);

        $this->assertEquals(["red", "red", "red", "black"], $actual);
    }

    public function test_translateSeconds_given0_shouldReturn1Red() {
        $actual = $this->actTranslateSeconds(0);

        $this->assertEquals(["red"],$actual);
    }

    public function actTranslate(int $int)
    {
        return $this->berlinClock->translate($int);
    }

    public function actTranslate5Minutes(int $int)
    {
        return $this->berlinClock->translate5Minutes($int);
    }

    public function actTranslateHour(int $int) {
        return $this->berlinClock->translateHour($int);
    }

    public function actTranslate5Hours(int $int) {
        return $this->berlinClock->translate5Hours($int);
    }

    public function actTranslateSeconds(int $int)
    {
        return $this->berlinClock->translateSeconds($int);
    }
}
